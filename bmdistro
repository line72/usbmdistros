#!/usr/bin/env python3
#
# bmdistro
# (c) 2021 Marcus Dillavou <line72@line72.net>
#
# Released under the GPLv3
#

import libbmdistro
import datetime

def go():
    db = libbmdistro.DB()
    now = datetime.datetime.utcnow()

    stores = {
        'stovokor': db.get_store(libbmdistro.Store(None, "Sto'Vo'Kor Records", "https://stovokor-records.com")),
        'arcane-altar': db.get_store(libbmdistro.Store(None, "Arcane Altar", "https://arcanealtar.bigcartel.com")),
        'debemur-morti': db.get_store(libbmdistro.Store(None, 'Debemur Morti', "https://debemurmorti.aisamerch.com/")),
        'caligari': db.get_store(libbmdistro.Store(None, 'Caligari Records', "https://caligarirecords.storenvy.com/")),
        'nwn': db.get_store(libbmdistro.Store(None, 'NWN Productions', 'https://shop.nwnprod.com')),
        'metal-to-the-core-1986': db.get_store(libbmdistro.Store(None, 'Metal To The Core 1986', 'https://metaltothecore1986.com')),
        'meteor-gem': db.get_store(libbmdistro.Store(None, 'Meteor Gem', 'https://meteor-gem.com')),
        'cw-productions': db.get_store(libbmdistro.Store(None, 'CW Productions', 'https://shop.cwproductions.net')),
        'blast-beats-vinyl': db.get_store(libbmdistro.Store(None, "Blast Beats Vinyl", "https://blastbeatsvinyl.com")),
        'out-of-season': db.get_store(libbmdistro.Store(None, "Out Of Season", "https://www.outofseasonlabel.com/")),
    }

    parsers = [
        # #libbmdistro.parsers.StoVoKor(stores['stovokor'], 'https://stovokor-records.com/collections/all.atom'),
        libbmdistro.parsers.StoVoKor(stores['stovokor'], 'https://stovokor-records.com/products.json'),
        libbmdistro.parsers.ArcaneAltar(stores['arcane-altar'], 'https://arcanealtar.bigcartel.com/category/12-vinyl.xml'),
        libbmdistro.parsers.ArcaneAltar(stores['arcane-altar'], 'https://arcanealtar.bigcartel.com/category/10-vinyl.xml'),
        libbmdistro.parsers.ArcaneAltar(stores['arcane-altar'], 'https://arcanealtar.bigcartel.com/category/7-vinyl.xml'),
        libbmdistro.parsers.ArcaneAltar(stores['arcane-altar'], 'https://arcanealtar.bigcartel.com/category/tapes.xml'),
        libbmdistro.parsers.ArcaneAltar(stores['arcane-altar'], 'https://arcanealtar.bigcartel.com/category/cds.xml'),
        libbmdistro.parsers.DebemurMorti(stores['debemur-morti'], 'https://debemurmorti.aisamerch.com/c/music-video'),
        # libbmdistro.parsers.Caligari(stores['caligari'], 'https://caligarirecords.storenvy.com/products.json'),
        libbmdistro.parsers.NWN(stores['nwn'], 'https://shop.nwnprod.com/index.php'),
        libbmdistro.parsers.MetalToTheCore1986(stores['metal-to-the-core-1986'], 'https://metaltothecore1986.com/wp-json/wc/store/products'),
        libbmdistro.parsers.MeteorGem(stores['meteor-gem'], 'https://meteor-gem.com/products.json'),
        libbmdistro.parsers.CWProductions(stores['cw-productions'], 'https://shop.cwproductions.net/products.json'),
        libbmdistro.parsers.BlastBeatsVinyl(stores['blast-beats-vinyl'], 'https://blastbeatsvinyl.com/products.json'),
        libbmdistro.parsers.OutOfSeason(stores['out-of-season'], 'https://www.outofseasonlabel.com/products.json'),
    ]

    
    for parser in parsers:
        print('parsing', parser.store.name)
        products = parser.parse(db)
        for p in products:
            db.add_product(p)

    # keys = sorted(db.items.keys())
    # for artist in keys:
    #     v = db.items[artist]
    #     print(f'{artist}')
    #     for album, v2 in v.items():
    #         print(f'  {album}')
    #         for item_type, v3 in v2.items():
    #             print(f'    {item_type}')
    #             for p in v3['products']:
    #                 print(f'      {p}')


    gf = libbmdistro.GenreFinder()
    gf.go(db)
                    
    o = libbmdistro.OutputWriter()
    o.write(db, 'website', now)

if __name__ == '__main__':
    go()
